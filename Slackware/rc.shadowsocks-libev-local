#!/bin/sh
### BEGIN INIT INFO
# Provides:          shadowsocks-libev-local
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: lightweight secured socks5 proxy
# Description:       Shadowsocks-libev-local is a lightweight secured
#                    socks5 proxy for embedded devices and low end boxes.
### END INIT INFO

# Author: Max Lv <max.c.lv@gmail.com>

# PATH should only include /usr/ if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=shadowsocks-libev-local       # Introduce a short description here
NAME=shadowsocks-libev-local       # Introduce the short server's name here
DAEMON=/usr/bin/ss-local    # Introduce the server's location here
PIDFILE=/var/run/$NAME/$NAME.pid
CONFFILE=
SCRIPTNAME=/etc/rc.d/$NAME
USER="nobody"
GROUP="nogroup"
DAEMON_ARGS="-a $USER"               # Arguments to run the daemon with

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
[ -r /home/live/Desktop/config.json ] && CONFFILE="/home/live/Desktop/config.json"

#[ "$START" = "yes" ] || exit 0


# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Modify the file descriptor limit
    ulimit -n ${MAXFD}

    # Take care of pidfile permissions
    mkdir /var/run/$NAME 2>/dev/null || true
    chown "$USER:$GROUP" /var/run/$NAME

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
#    start-stop-daemon --start --pidfile $PIDFILE --chuid $USER:$GROUP --exec $DAEMON --test > /dev/null \
#        || return 1
#    start-stop-daemon --start --pidfile $PIDFILE --chuid $USER:$GROUP --exec $DAEMON -- \
#        -c "$CONFFILE" -f $PIDFILE $DAEMON_ARGS \
#        || return 2
    $DAEMON  -c "$CONFFILE" -f $PIDFILE $DAEMON_ARGS || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    #start-stop-daemon --stop --quiet --retry=TERM/5 --pidfile $PIDFILE --exec $DAEMON

    PID=$(cat $PIDFILE)
    kill $PID
    RETVAL="$?"
    [ ! "$RETVAL" = 0 ] && return 2
    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    #start-stop-daemon --stop --quiet --oknodo --retry=KILL/5 --exec $DAEMON
    #[ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    [ "$RETVAL" = 0 ] && rm -f $PIDFILE
    return "$RETVAL"
}


case "$1" in
    start)
        [ "$VERBOSE" != no ] && echo "Starting " "$NAME"
        do_start
        case "$?" in
            0|1) [ "$VERBOSE" != no ] && echo 0 ;;
        2) [ "$VERBOSE" != no ] && echo 1 ;;
		esac
    ;;
stop)
    [ "$VERBOSE" != no ] && echo "Stopping " "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && echo 0 ;;
    2) [ "$VERBOSE" != no ] && echo 1 ;;
	esac
	;;
  status)
		PID=$(cat $PIDFILE 2>/dev/null)
		if [ ! -z $PID ]; then
			if ps -p $PID >/dev/null; then
				echo "$NAME is running, pid: $PID." && exit 0 
			else
				echo "$NAME is not running." && exit 2 
			fi
		else
			echo "$NAME is not running." && exit 2 
		fi
      ;;
  restart|force-reload)
      echo "Restarting " "$NAME"
      do_stop
      case "$?" in
          0|1)
              do_start
              case "$?" in
                  0) echo 0 ;;
              1) echo 1 ;; # Old process is still running
          *) echo 1 ;; # Failed to start
	  esac
      ;;
  *)
      # Failed to stop
      echo 1
      ;;
    esac
    ;;
*)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
